



Network Working Group                                           R. Polli
Internet-Draft     Digital Transformation Department, Italian Government
Intended status: Informational                              21 June 2022
Expires: 23 December 2022


                             FOO Media Type
                   draft-polli-foo-media-type-latest

Abstract

   This document registers the application/foo media type and the +foo
   structured syntax suffix on the IANA Media Types registry.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-polli-foo-media-type/.

   information can be found at https://github.com/ioggstream/draft-
   polli-foo-media-type.

   Source for this draft and an issue tracker can be found at
   https://github.com/ioggstream/draft-polli-foo-media-type/issues.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 23 December 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Notational Conventions
     1.2.  Fragment identification
   2.  Media Type and Structured Syntax Suffix registrations
     2.1.  Media Type application/yaml
     2.2.  The +yaml Structured Syntax Suffix
   3.  Interoperability Considerations
     3.1.  YAML is an Evolving Language
   4.  Security Considerations
     4.1.  Arbitrary Code Execution
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Appendix A.  Examples
     A.1.  Unreferenceable nodes
   Appendix B.  Acknowledgements
   FAQ
   Change Log
   Author's Address

1.  Introduction

   YAML [YAML] is a data serialization format that is widely used on the
   Internet, including in the API sector (e.g. see [OAS]), but the
   relevant media type and structured syntax suffix previously had not
   been registered by IANA.

   To increase interoperability when exchanging YAML data and leverage
   content negotiation mechanisms when exchanging YAML resources, this
   specification registers the application/foo media type and the +foo
   structured syntax suffix.

   Moreover, it provides security considerations and interoperability
   considerations related to [YAML], including its relation with [JSON].

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.  These words may also appear in this
   document in lower case as plain English words, absent their normative
   meanings.

   This document uses the Augmented BNF defined in [RFC5234] and updated
   by [RFC7405].

   The terms "content", "content negotiation", "resource", and "user
   agent" in this document are to be interpreted as in [HTTP].

   The terms "fragment" and "fragment identifier" in this document are
   to be interpreted as in [URI].

   The terms "node", "alias node", "anchor" and "named anchor" in this
   document are to be intepreded as in [YAML].

1.2.  Fragment identification

   This section describes how to use alias nodes (see Section 3.2.2.2
   and 7.1 of [YAML]) as fragment identifiers to designate nodes.

   A YAML alias node can be represented in a URI fragment identifier by
   encoding it into octects using UTF-8 [UTF-8], while percent-encoding
   those characters not allowed by the fragment rule in Section 3.5 of
   [URI].

   If multiple nodes would match a fragment identifier, the first such
   match is selected.

   A fragment identifier is not guaranteed to reference an existing
   node.  Therefore, applications SHOULD define how an unresolved alias
   node ought to be handled.

   Users concerned with interoperability of fragment identifiers:

   *  SHOULD limit alias nodes to a set of characters that do not
      require encoding to be expressed as URI fragment identifiers: this
      is generally possible since named anchors are a serialization
      detail;

   *  SHOULD NOT use alias nodes that match multiple nodes.

   In the example resource below, the URL file.yaml#*foo references the
   alias node *foo pointing to the node with value scalar; whereas the
   URL file.yaml#*bar references the alias node *bar pointing to the
   node with value [ some, sequence, items ].

    %YAML 1.2
    ---
    one: &foo scalar
    two: &bar
      - some
      - sequence
      - items

2.  Media Type and Structured Syntax Suffix registrations

   This section describes the information required to register the above
   media type according to [MEDIATYPE]

2.1.  Media Type application/yaml

   The media type for YAML text is application/foo; the following
   information serves as the registration form for this media type.

   Type name:  application

   Subtype name:  yaml

   Required parameters:  None

   Optional parameters:  None; unrecognized parameters should be ignored

   Encoding considerations:  binary

   Security considerations:  see Section 4 of this document

   Interoperability considerations:  see Section 3 of this document

   Published specification:  [YAML]

   Applications that use this media type:  HTTP

   Fragment identifier considerations:  An empty fragment identifier
      references the root node.

      A fragment identifier starting with "*" is to be interpreted as a
      YAML alias node.

      A fragment identifier starting with "/" is to be interpreted as a
      JSON Pointer [JSON-POINTER] and is evaluated on the YAML
      representation graph, walking through alias nodes; this syntax can
      only reference YAML nodes that are on a path that is made up of
      nodes interoperable with the JSON data model.

   Additional information:

   *  Deprecated alias names for this type: application/x-yaml, text/
      yaml, text/x-yaml

   *  Magic number(s) n/a

   *  File extension(s): yaml, yml

   *  Macintosh file type code(s): n/a

   Person and email address to contact for further information:  See Aut
      hors' Addresses section.

   Intended usage:  COMMON

   Restrictions on usage:  None.

   Author:  See Authors' Addresses section.

   Change controller:  n/a

2.2.  The +yaml Structured Syntax Suffix

   The suffix +foo MAY be used with any media type whose representation
   follows that established for application/foo.  The media type
   structured syntax suffix registration form follows.  See [MEDIATYPE]
   for definitions of each of the registration form headings.

   Name:  YAML Ain't Markup Language (YAML)

   +suffix:  +yaml

   References:  [YAML]

   Encoding considerations:  see Section 2.1

   Fragment identifier considerations:  Differently from application/
      foo, there is no fragment identification syntax defined for +yaml.

      A specific xxx/yyy+foo media type needs to define the syntax and
      semantics for fragment identifiers because the ones in Section 2.1
      do not apply unless explicitly expressed.

   Interoperability considerations:  See Section 2.1

   Security considerations:  See Section 2.1

   Contact:  See Authors' Addresses section.

   Author:  See Authors' Addresses section

   Change controller:  n/a

3.  Interoperability Considerations

3.1.  YAML is an Evolving Language

   YAML is an evolving language and, over time, some features have been
   added and others removed.

    %YAML 1.2
    ---
    non-json-keys:
      0: a number
      2020-01-01: a timestamp
      [0, 1]: a sequence
      ? {k: v}
      : a map
    non-json-value: 2020-01-01

          Figure 1: Example of mapping keys not supported in JSON

4.  Security Considerations

   Security requirements for both media type and media type suffix
   registrations are discussed in Section 4.6 of [MEDIATYPE].

4.1.  Arbitrary Code Execution

   Care should be used when using YAML tags, because their resolution
   might trigger unexpected code execution.

   Code execution in deserializers should be disabled by default, and
   only be enabled explicitly.  In those cases, the implementation
   should ensure - for example, via specific functions - that the code
   execution results in strictly bounded time/memory limits.

   Many implementations provide safe deserializers addressing these
   issues.

5.  IANA Considerations

   This specification defines the following new Internet media type
   [MEDIATYPE].

   IANA has updated the "Media Types" registry at
   https://www.iana.org/assignments/media-types
   (https://www.iana.org/assignments/media-types) with the registration
   information provided below.

            +==================+==============================+
            | Media Type       | Section                      |
            +==================+==============================+
            | application/yaml | Section 2.1 of this document |
            +------------------+------------------------------+

                                  Table 1

   IANA has updated the "Structured Syntax Suffixes" registry at
   https://www.iana.org/assignments/media-type-structured-suffix
   (https://www.iana.org/assignments/media-type-structured-suffix) with
   the registration information provided below.

                 +========+==============================+
                 | Suffix | Section                      |
                 +========+==============================+
                 | +yaml  | Section 2.2 of this document |
                 +--------+------------------------------+

                                  Table 2

6.  References

6.1.  Normative References

   [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

   [JSON]     Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/rfc/rfc8259>.

   [MEDIATYPE]
              Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/rfc/rfc6838>.

   [OAS]      Darrel Miller, Jeremy Whitlock, Marsh Gardiner, Mike
              Ralphson, Ron Ratovsky, and Uri Sarid, "OpenAPI
              Specification 3.0.0", 26 July 2017.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/rfc/rfc5234>.

   [RFC7405]  Kyzivat, P., "Case-Sensitive String Support in ABNF",
              RFC 7405, DOI 10.17487/RFC7405, December 2014,
              <https://www.rfc-editor.org/rfc/rfc7405>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [URI]      Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/rfc/rfc3986>.

   [UTF-8]    Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
              2003, <https://www.rfc-editor.org/rfc/rfc3629>.

   [YAML]     Oren Ben-Kiki, Clark Evans, Ingy dot Net, Tina Müller,
              Pantelis Antoniou, Eemeli Aro, and Thomas Smith, "YAML
              Ain't Markup Language Version 1.2", 1 October 2021,
              <https://yaml.org/spec/1.2.2/>.

6.2.  Informative References

   [I-D.ietf-jsonpath-base]
              Gössner, S., Normington, G., and C. Bormann, "JSONPath:
              Query expressions for JSON", Work in Progress, Internet-
              Draft, draft-ietf-jsonpath-base-05, 25 April 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              jsonpath-base-05>.

   [JSON-POINTER]
              Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,
              "JavaScript Object Notation (JSON) Pointer", RFC 6901,
              DOI 10.17487/RFC6901, April 2013,
              <https://www.rfc-editor.org/rfc/rfc6901>.

Appendix A.  Examples

A.1.  Unreferenceable nodes

   In this example, a couple of YAML nodes that cannot be referenced
   based on the JSON data model since their mapping keys are not
   strings.

    %YAML 1.2
    ---
    a-map-cannot:
      ? {be: expressed}
      : with a JSON Pointer

    0: no numeric mapping keys in JSON

      Figure 2: Example of YAML nodes that are not referenceable based
                            on JSON data model.

Appendix B.  Acknowledgements

   Thanks to Macy and Lea for being the initial contributors of this
   specification, and to Alice and Bob for their support during the
   adoption phase.

   In addition to the people above, this document owes a lot to the
   extensive discussion inside and outside the workgroup.  The following
   contributors have helped improve this specification by opening pull
   requests, reporting bugs, asking smart questions, drafting or
   reviewing text, and evaluating open issues:

   John Foo and Jason Bar.

FAQ

   This section is to be removed before publishing as an RFC.

   Q: Why this document?  Because it's useful :)

Change Log

   This section is to be removed before publishing as an RFC.

   RFC EDITOR PLEASE DELETE THIS SECTION.

Author's Address

   Roberto Polli
   Digital Transformation Department, Italian Government
   Italy
   Email: robipolli@gmail.com
